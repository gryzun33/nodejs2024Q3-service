openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UserController_findAll
      summary: Get all users
      parameters: []
      responses:
        '200':
          description: Successfully retrieved all users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
      tags: &ref_0
        - Users
    post:
      operationId: UserController_create
      summary: Create a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request. Invalid input.
      tags: *ref_0
  /user/{id}:
    get:
      operationId: UserController_findOne
      summary: Get a user by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid UUID format.
        '404':
          description: User not found.
      tags: *ref_0
    put:
      operationId: UserController_updatePassword
      summary: Update user password
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: Password successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid UUID or bad input.
        '403':
          description: Old password is wrong.
        '404':
          description: User not found.
      tags: *ref_0
    delete:
      operationId: UserController_deleteUser
      summary: Delete a user
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: User successfully deleted.
        '400':
          description: Invalid UUID.
        '404':
          description: User not found.
      tags: *ref_0
  /artist:
    post:
      operationId: ArtistController_create
      summary: Create new artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: The artist has been successfully created.
        '400':
          description: Bad request. Invalid input.
      tags: &ref_1
        - Artists
    get:
      operationId: ArtistController_findAll
      summary: Get all artists
      parameters: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
      tags: *ref_1
  /artist/{id}:
    get:
      operationId: ArtistController_findOne
      summary: Get single artist by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad request. Invalid UUID.
        '404':
          description: Artist not found.
      tags: *ref_1
    put:
      operationId: ArtistController_update
      summary: Update artist info
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: The artist has been successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad request. Invalid UUID or input.
        '404':
          description: Artist not found.
      tags: *ref_1
    delete:
      operationId: ArtistController_remove
      summary: Delete artist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The artist has been successfully deleted.
        '400':
          description: Bad request. Invalid UUID.
        '404':
          description: Artist not found.
      tags: *ref_1
  /album:
    post:
      operationId: AlbumController_create
      summary: Create a new album
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: The album has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad request. Invalid input data.
      tags: &ref_2
        - Albums
    get:
      operationId: AlbumController_findAll
      summary: Get all albums
      parameters: []
      responses:
        '200':
          description: List of all albums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
      tags: *ref_2
  /album/{id}:
    get:
      operationId: AlbumController_findOne
      summary: Get a single album by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The album was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Invalid UUID format.
        '404':
          description: Album not found.
      tags: *ref_2
    put:
      operationId: AlbumController_update
      summary: Update album details
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: The album has been successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad request. Invalid input data.
        '404':
          description: Album not found.
      tags: *ref_2
    delete:
      operationId: AlbumController_remove
      summary: Delete an album
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The album has been successfully deleted.
        '400':
          description: Invalid UUID format.
        '404':
          description: Album not found.
      tags: *ref_2
  /track:
    post:
      operationId: TrackController_create
      summary: Create a new track
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: The track has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad request. Invalid input data.
      tags: &ref_3
        - Tracks
    get:
      operationId: TrackController_findAll
      summary: Get all tracks
      parameters: []
      responses:
        '200':
          description: List of all tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
      tags: *ref_3
  /track/{id}:
    get:
      operationId: TrackController_findOne
      summary: Get a single track by ID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The track was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Invalid UUID format.
        '404':
          description: Track not found.
      tags: *ref_3
    put:
      operationId: TrackController_update
      summary: Update track details
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: The track has been successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad request. Invalid input data.
        '404':
          description: Track not found.
      tags: *ref_3
    delete:
      operationId: TrackController_remove
      summary: Delete a track
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: The track has been successfully deleted.
        '400':
          description: Invalid UUID format.
        '404':
          description: Track not found.
      tags: *ref_3
  /favs:
    get:
      operationId: FavoritesController_getFavorites
      summary: Retrieve all favorite items
      parameters: []
      responses:
        '200':
          description: Successfully retrieved all favorite items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponse'
      tags: &ref_4
        - Favorites
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtistToFavorites
      summary: Add artist to favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Artist successfully added to favorites
        '400':
          description: Invalid UUID format.
        '422':
          description: Artist not found.
      tags: *ref_4
    delete:
      operationId: FavoritesController_removeArtistFromFavorites
      summary: Remove artist from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Artist successfully removed from favorites
        '400':
          description: Invalid UUID format.
        '404':
          description: Artist is not favorite.
      tags: *ref_4
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbumToFavorites
      summary: Add album to favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Album successfully added to favorites
        '400':
          description: Invalid UUID format.
        '422':
          description: Album not found.
      tags: *ref_4
    delete:
      operationId: FavoritesController_removeAlbumFromFavorites
      summary: Remove album from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Album successfully removed from favorites
        '400':
          description: Invalid UUID format.
        '404':
          description: Album is not favorite.
      tags: *ref_4
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrackToFavorites
      summary: Add track to favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Track successfully added to favorites
        '400':
          description: Invalid UUID format.
        '422':
          description: Track not found.
      tags: *ref_4
    delete:
      operationId: FavoritesController_removeTrackFromFavorites
      summary: Remove track from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Track successfully removed from favorites
        '400':
          description: Invalid UUID format.
        '404':
          description: Track is not favorite.
      tags: *ref_4
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0
  contact: {}
tags:
  - name: Users
    description: Operations related to users
  - name: Artists
    description: Operations related to artists
  - name: Albums
    description: Operations related to albums
  - name: Tracks
    description: Operations related to tracks
  - name: Favorites
    description: Operations related to favorites
servers: []
components:
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: Unique identifier for the user
        login:
          type: string
          example: testuser
          description: The login of user
        version:
          type: number
          example: 1
          description: The version number of the user record
        createdAt:
          type: number
          example: 1627848273
          description: Timestamp when the user was created
        updatedAt:
          type: number
          example: 1627848373
          description: Timestamp when the user was last updated
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: testuser
          description: The login of the user
        password:
          type: string
          example: password123
          description: The password of the user
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: password123
          description: The current password of the user
        newPassword:
          type: string
          example: password456
          description: The new password the user wants to set
      required:
        - oldPassword
        - newPassword
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Thom Yorke
          description: The name of artist
        grammy:
          type: boolean
          example: true
          description: Indicates whether the artist has won a Grammy award.
      required:
        - name
        - grammy
    Artist:
      type: object
      properties:
        id:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: Unique identifier for the artist
        name:
          type: string
          example: 'Billie Eilish '
          description: The name of artist
        grammy:
          type: boolean
          example: true
          description: Indicates whether the artist has won a Grammy award.
      required:
        - id
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Adele
          description: The name of artist
        grammy:
          type: boolean
          example: true
          description: Indicates whether the artist has won a Grammy award.
      required:
        - name
        - grammy
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the album
          example: In rainbows
        year:
          type: number
          description: The release year of the album
          example: 2007
        artistId:
          type: string
          description: The UUID of the artist associated with the album
          example: 550e8400-e29b-41d4-a716-446655440000
      required:
        - name
        - year
        - artistId
    Album:
      type: object
      properties:
        id:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: Unique identifier for the album
        name:
          type: string
          example: In Rainbows
          description: The name of the album
        year:
          type: number
          example: 2007
          description: The year the album was released
        artistId:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: The UUID of the artist who created the album
          nullable: true
      required:
        - id
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the album
          example: 2+2=5
        year:
          type: number
          description: The release year of the album
          example: 2003
        artistId:
          type: string
          description: The UUID of the artist associated with the album
          example: 550e8400-e29b-41d4-a716-446655440000
      required:
        - name
        - year
        - artistId
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Jigsaw falling into place
          description: The name of the track
        artistId:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: The UUID of the artist who created the track. Can be null.
          nullable: true
        albumId:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: The UUID of the album to which the track belongs. Can be null.
          nullable: true
        duration:
          type: number
          example: 240
          description: Duration of the track in seconds
      required:
        - name
        - artistId
        - albumId
        - duration
    Track:
      type: object
      properties:
        id:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: Unique identifier for the track
        name:
          type: string
          example: Jigsaw falling into place
          description: The name of the track
        artistId:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: The UUID of the artist who created the track
          nullable: true
        albumId:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: The UUID of the album to which the track belongs
          nullable: true
        duration:
          type: number
          example: 240
          description: Duration of the track in seconds
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: 15 step
          description: The name of the track
        artistId:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: The UUID of the artist who created the track. Can be null.
          nullable: true
        albumId:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: The UUID of the album to which the track belongs. Can be null.
          nullable: true
        duration:
          type: number
          example: 220
          description: Duration of the track in seconds
      required:
        - name
        - artistId
        - albumId
        - duration
    FavoritesResponse:
      type: object
      properties:
        artists:
          description: List of favorite artists
          example:
            - id: 550e8400-e29b-41d4-a716-446655440000
              name: Radiohead
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          description: List of favorite albums
          example:
            - id: 550e8400-e29b-41d4-a716-446655440001
              name: In Rainbows
              year: 2007
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          description: List of favorite tracks
          example:
            - id: 550e8400-e29b-41d4-a716-446655440002
              name: Jigsaw falling into place
              duration: 240
          type: array
          items:
            $ref: '#/components/schemas/Track'
      required:
        - artists
        - albums
        - tracks
